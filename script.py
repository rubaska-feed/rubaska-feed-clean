import time
import json
import requests
import xml.etree.ElementTree as ET
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

SHOP_NAME = "676c64"
API_VERSION = "2023-10"
TOKEN = os.getenv("SHOPIFY_API_TOKEN")

BASE_URL = f"https://{SHOP_NAME}.myshopify.com/admin/api/{API_VERSION}"
HEADERS = {
    "X-Shopify-Access-Token": TOKEN,
    "Content-Type": "application/json"
}

# BULK API: –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞
def start_bulk_export():
    url = f"{BASE_URL}/graphql.json"
    query = {
        "query": """
        mutation {
          bulkOperationRunQuery(
            query: """
            {
              products {
                edges {
                  node {
                    id
                    title
                    handle
                    vendor
                    bodyHtml
                    productType
                    images(first: 10) { edges { node { src } } }
                    variants(first: 10) {
                      edges {
                        node {
                          id
                          title
                          sku
                          price
                          inventoryQuantity
                        }
                      }
                    }
                    metafields(first: 20) {
                      edges {
                        node {
                          namespace
                          key
                          value
                        }
                      }
                    }
                  }
                }
              }
            }
            """
          ) {
            bulkOperation {
              id
              status
            }
            userErrors {
              field
              message
            }
          }
        }
        """
    }

    response = requests.post(url, headers=HEADERS, json=query)
    response.raise_for_status()
    print("üì¶ Bulk export started.")

# BULK API: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞

def get_bulk_operation_status():
    url = f"{BASE_URL}/graphql.json"
    query = {
        "query": """
        {
          currentBulkOperation {
            id
            status
            url
            errorCode
          }
        }
        """
    }

    response = requests.post(url, headers=HEADERS, json=query)
    response.raise_for_status()
    return response.json()["data"]["currentBulkOperation"]

# BULK API: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞

def download_bulk_file(url):
    response = requests.get(url)
    response.raise_for_status()
    lines = response.text.strip().split("\n")
    products = [json.loads(line)["node"] for line in lines]
    return products

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è XML-—Ñ–∏–¥–∞ –∏–∑ Bulk API

def generate_xml(products):
    ET.register_namespace("g", "http://base.google.com/ns/1.0")
    rss = ET.Element("rss", {"version": "2.0"})
    shop = ET.SubElement(rss, "shop")

    ET.SubElement(shop, "name").text = '–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω "Rubaska"'
    ET.SubElement(shop, "company").text = "Rubaska"
    ET.SubElement(shop, "url").text = "https://rubaska.com/"

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ Prom.ua
    category_info = {
        "–°–æ—Ä–æ—á–∫–∞": {"category_id": "129880800", "parent_id": "129880784", "group_name": "–ß–æ–ª–æ–≤—ñ—á—ñ —Å–æ—Ä–æ—á–∫–∏", "portal_url": "https://prom.ua/Muzhskie-rubashki", "subdivision_id": "348"},
        "–§—É—Ç–±–æ–ª–∫–∞": {"category_id": "129880791", "parent_id": "129880784", "group_name": "–ß–æ–ª–æ–≤—ñ—á—ñ —Ñ—É—Ç–±–æ–ª–∫–∏ —Ç–∞ –º–∞–π–∫–∏", "portal_url": "https://prom.ua/Futbolki-muzhskie", "subdivision_id": "35506"},
        "–ñ–∏–ª–µ—Ç": {"category_id": "129883725", "parent_id": "129880784", "group_name": "–°–≤—è—Ç–∫–æ–≤—ñ –∂–∏–ª–µ—Ç–∏", "portal_url": "https://prom.ua/ua/Muzhskie-zhiletki-i-bezrukavki-1", "subdivision_id": "35513"},
    }

    categories = ET.SubElement(shop, "categories")
    for cat in category_info.values():
        ET.SubElement(categories, "category", id=cat["category_id"], parentId=cat["parent_id"]).text = cat["group_name"]

    offers = ET.SubElement(shop, "offers")

    for product in products:
        product_type = product.get("productType", "–°–æ—Ä–æ—á–∫–∞")
        category = category_info.get(product_type, category_info["–°–æ—Ä–æ—á–∫–∞"])

        for variant in product.get("variants", {}).get("edges", []):
            v = variant["node"]
            safe_id = str(int(v["id"].split("/")[-1]) % 2147483647)
            title_parts = v.get("title", "").split(" / ")
            size = title_parts[0] if len(title_parts) > 0 else "M"
            color = title_parts[1] if len(title_parts) > 1 else "–ù–µ–≤—ñ–¥–æ–º–æ"
            collar = title_parts[2] if len(title_parts) > 2 else "–ö–ª–∞—Å–∏—á–Ω–∏–π"

            available = "true" if v.get("inventoryQuantity", 0) > 0 else "false"

            offer = ET.SubElement(offers, "offer", attrib={
                "id": safe_id,
                "available": available,
                "in_stock": "true" if available == "true" else "false",
                "type": "vendor.model",
                "selling_type": "r",
                "group_id": safe_id
            })

            # –†–∞–∑–º–µ—Ä–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            measurements = {
                "S":   {"–û–±—Ö–≤–∞—Ç —à–∏—ó": "38", "–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–µ–π": "98",  "–û–±—Ö–≤–∞—Ç —Ç–∞–ª—ñ—ó": "90", "–î–æ–≤–∂–∏–Ω–∞ —Ä—É–∫–∞–≤–∞": "63", "–†–æ–∑–º—ñ—Ä–∏ —á–æ–ª–æ–≤—ñ—á–∏—Ö —Å–æ—Ä–æ—á–æ–∫": "44"},
                "M":   {"–û–±—Ö–≤–∞—Ç —à–∏—ó": "39", "–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–µ–π": "104", "–û–±—Ö–≤–∞—Ç —Ç–∞–ª—ñ—ó": "96", "–î–æ–≤–∂–∏–Ω–∞ —Ä—É–∫–∞–≤–∞": "64", "–†–æ–∑–º—ñ—Ä–∏ —á–æ–ª–æ–≤—ñ—á–∏—Ö —Å–æ—Ä–æ—á–æ–∫": "46"},
                "L":   {"–û–±—Ö–≤–∞—Ç —à–∏—ó": "41", "–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–µ–π": "108", "–û–±—Ö–≤–∞—Ç —Ç–∞–ª—ñ—ó": "100", "–î–æ–≤–∂–∏–Ω–∞ —Ä—É–∫–∞–≤–∞": "65", "–†–æ–∑–º—ñ—Ä–∏ —á–æ–ª–æ–≤—ñ—á–∏—Ö —Å–æ—Ä–æ—á–æ–∫": "48"},
                "XL":  {"–û–±—Ö–≤–∞—Ç —à–∏—ó": "43", "–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–µ–π": "112", "–û–±—Ö–≤–∞—Ç —Ç–∞–ª—ñ—ó": "108", "–î–æ–≤–∂–∏–Ω–∞ —Ä—É–∫–∞–≤–∞": "66", "–†–æ–∑–º—ñ—Ä–∏ —á–æ–ª–æ–≤—ñ—á–∏—Ö —Å–æ—Ä–æ—á–æ–∫": "50"},
                "XXL": {"–û–±—Ö–≤–∞—Ç —à–∏—ó": "45", "–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–µ–π": "120", "–û–±—Ö–≤–∞—Ç —Ç–∞–ª—ñ—ó": "112", "–î–æ–≤–∂–∏–Ω–∞ —Ä—É–∫–∞–≤–∞": "67", "–†–æ–∑–º—ñ—Ä–∏ —á–æ–ª–æ–≤—ñ—á–∏—Ö —Å–æ—Ä–æ—á–æ–∫": "52"},
                "3XL": {"–û–±—Ö–≤–∞—Ç —à–∏—ó": "46", "–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–µ–π": "126", "–û–±—Ö–≤–∞—Ç —Ç–∞–ª—ñ—ó": "124", "–î–æ–≤–∂–∏–Ω–∞ —Ä—É–∫–∞–≤–∞": "68", "–†–æ–∑–º—ñ—Ä–∏ —á–æ–ª–æ–≤—ñ—á–∏—Ö —Å–æ—Ä–æ—á–æ–∫": "54"},
            }
            for label, value in measurements.get(size, {}).items():
                ET.SubElement(offer, "param", name=label).text = value

            ET.SubElement(offer, "name").text = product["title"]
            ET.SubElement(offer, "name_ua").text = product["title"]
            ET.SubElement(offer, "description").text = f"<![CDATA[{product.get('bodyHtml', '')}]]>"
            ET.SubElement(offer, "description_ua").text = f"<![CDATA[{product.get('bodyHtml', '')}]]>"
            ET.SubElement(offer, "url").text = f"https://rubaska.com/products/{product['handle']}"

            for i, img in enumerate(product.get("images", {}).get("edges", [])):
                ET.SubElement(offer, "picture").text = img["node"]["src"]

            ET.SubElement(offer, "price").text = v.get("price", "0")
            ET.SubElement(offer, "currencyId").text = "UAH"
            ET.SubElement(offer, "categoryId").text = category["category_id"]
            ET.SubElement(offer, "portal_category_id").text = category["category_id"]
            ET.SubElement(offer, "vendor").text = product.get("vendor", "RUBASKA")
            ET.SubElement(offer, "model").text = v.get("title", "–ú–æ–¥–µ–ª—å")
            ET.SubElement(offer, "vendorCode").text = v.get("sku") or safe_id
            ET.SubElement(offer, "country").text = "–¢—É—Ä–µ—á—á–∏–Ω–∞"
            ET.SubElement(offer, "param", name="–ö–æ–ª—ñ—Ä").text = color
            ET.SubElement(offer, "param", name="–†–æ–∑–º—ñ—Ä").text = size
            ET.SubElement(offer, "param", name="–¢–∏–ø —Å–æ—Ä–æ—á–∫–æ–≤–æ–≥–æ –∫–æ–º—ñ—Ä–∞").text = collar

            field_mapping = {
                "–¢–∏–ø –≤–∏—Ä–æ–±—É": "product_type",
                "–ó–∞—Å—Ç–µ–∂–∫–∞": "fastening",
                "–¢–∏–ø —Ç–∫–∞–Ω–∏–Ω–∏": "fabric_type",
                "–¢–∏–ø –∫—Ä–æ—é": "cut_type",
                "–§–∞—Å–æ–Ω —Ä—É–∫–∞–≤–∞": "sleeve_style",
                "–ú–∞–Ω–∂–µ—Ç —Å–æ—Ä–æ—á–∫–∏": "shirt_cuff",
                "–°—Ç–∏–ª—å": "style",
                "–°–∫–ª–∞–¥": "fabric_composition",
                "–ö–∏—à–µ–Ω—ñ": "pockets",
            }
            metafields = {m["node"]["key"]: m["node"]["value"] for m in product.get("metafields", {}).get("edges", []) if m["node"]["namespace"] == "custom"}
            for label, key in field_mapping.items():
                if key in metafields:
                    ET.SubElement(offer, "param", name=label).text = metafields[key]

            ET.SubElement(offer, "param", name="–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π —Ä–æ–∑–º—ñ—Ä").text = size
            ET.SubElement(offer, "param", name="–°—Ç–∞–Ω").text = "–ù–æ–≤–∏–π"
            ET.SubElement(offer, "param", name="–î–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Ç–æ–≤–∞—Ä").text = "–û–¥–µ—Å–∞"
            ET.SubElement(offer, "param", name="–ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫").text = "–¢—É—Ä–µ—á—á–∏–Ω–∞"

            for attr_name, attr_value in {
                "–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä_–ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É": category["subdivision_id"],
                "–ü–æ—Å–∏–ª–∞–Ω–Ω—è_–ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É": category["portal_url"],
                "–ù–∞–∑–≤–∞_–≥—Ä—É–ø–∏": category["group_name"]
            }.items():
                detail = ET.SubElement(offer, "{http://base.google.com/ns/1.0}product_detail")
                ET.SubElement(detail, "{http://base.google.com/ns/1.0}attribute_name").text = attr_name
                ET.SubElement(detail, "{http://base.google.com/ns/1.0}attribute_value").text = attr_value

    return ET.ElementTree(rss)

# –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ Bulk API + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
if __name__ == "__main__":
    start_bulk_export()
    print("‚è≥ –û—á—ñ–∫—É—î–º–æ 60 —Å–µ–∫—É–Ω–¥...")
    time.sleep(60)

    status = get_bulk_operation_status()
    if status["status"] == "COMPLETED":
        print("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ...")
        products = download_bulk_file(status["url"])
        print(f"üî¢ –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: {len(products)}")

        xml_tree = generate_xml(products)
        xml_tree.write("feed.xml", encoding="utf-8", xml_declaration=True)
        print("‚úîÔ∏è –§—ñ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–æ: feed.xml")
    else:
        print("‚ùó –û–ø–µ—Ä–∞—Ü—ñ—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–∞—Ç—É—Å –ø—ñ–∑–Ω—ñ—à–µ.")

